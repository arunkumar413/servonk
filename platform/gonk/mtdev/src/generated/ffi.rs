/* automatically generated by rust-bindgen */

pub type __kernel_time_t = :: std :: os :: raw :: c_long ; pub type __kernel_suseconds_t = :: std :: os :: raw :: c_long ; pub type __u16 = :: std :: os :: raw :: c_ushort ; pub type __s32 = :: std :: os :: raw :: c_int ; pub type suseconds_t = __kernel_suseconds_t ; pub type time_t = __kernel_time_t ; # [ repr ( C ) ] # [ derive ( Debug , Default , Copy , Clone ) ] pub struct timeval { pub tv_sec : time_t , pub tv_usec : suseconds_t , } # [ repr ( C ) ] # [ derive ( Debug , Default , Copy , Clone ) ] pub struct input_event { pub time : timeval , pub type_ : __u16 , pub code : __u16 , pub value : __s32 , } # [ repr ( C ) ] # [ derive ( Debug , Default , Copy , Clone ) ] pub struct input_absinfo { pub value : __s32 , pub minimum : __s32 , pub maximum : __s32 , pub fuzz : __s32 , pub flat : __s32 , } extern "C" { 
 /// mtdev_new_open - create and open a new mtdev
/// @fd: file descriptor of the kernel device
///
/// Create a new mtdev and open the conversion.
///
/// Returns zero in case of failure.
///
/// This call combines the plumbing functions mtdev_new() and
/// mtdev_open(). 
 pub fn mtdev_new_open ( fd : :: std :: os :: raw :: c_int ) -> * mut mtdev ; } extern "C" { 
 /// mtdev_has_mt_event - check for event type
/// @dev: the mtdev in use
/// @code: the ABS_MT code to look for
///
/// Returns true if the given event code is present. 
 pub fn mtdev_has_mt_event ( dev : * const mtdev , code : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { 
 /// mtdev_get_abs_<property> - get abs event property
/// @dev: the mtdev in use
/// @code: the ABS_MT code to look for
///
/// Returns NULL if code is not a valid ABS_MT code. 
 pub fn mtdev_get_abs_minimum ( dev : * const mtdev , code : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { 
 /// mtdev_get - get processed events from mtdev
/// @dev: the mtdev in use
/// @fd: file descriptor of the kernel device
/// @ev: array of input events to fill
/// @ev_max: maximum number of events to read
///
/// Get a processed event from mtdev. The events appear as if they came
/// from a type B device emitting MT slot events.
///
/// The read operations involved behave as dictated by the file
/// descriptor; if O_NONBLOCK is not set, mtdev_get() will block until
/// the specified number of processed events are available.
///
/// On success, returns the number of events read. Otherwise,
/// a standard negative error number is returned.
///
/// This call combines the plumbing functions mtdev_fetch_event(),
/// mtdev_put_event() and mtdev_get_event(). 
 pub fn mtdev_get ( dev : * mut mtdev , fd : :: std :: os :: raw :: c_int , ev : * mut input_event , ev_max : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { 
 /// mtdev_close_delete - close conversion and delete mtdev
/// @dev: the mtdev in use
///
/// Flush pending buffers and deallocate all memory associated with
/// mtdev. The device pointer is invalidated.  This call combines the
/// plumbing functions mtdev_close() and mtdev_delete(). 
 pub fn mtdev_close_delete ( dev : * mut mtdev ) ; } # [ repr ( C ) ] # [ derive ( Debug , Default , Copy , Clone ) ] pub struct mtdev_caps { pub has_mtdata : :: std :: os :: raw :: c_int , pub has_slot : :: std :: os :: raw :: c_int , pub has_abs : [ :: std :: os :: raw :: c_int ; 11usize ] , pub slot : input_absinfo , pub abs : [ input_absinfo ; 11usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct mtdev { pub caps : mtdev_caps , pub state : * mut mtdev_state , } impl Default for mtdev { fn default ( ) -> Self { unsafe { :: std :: mem :: zeroed ( ) } } } # [ repr ( C ) ] # [ derive ( Debug , Default , Copy , Clone ) ] pub struct mtdev_state { pub _address : u8 , }